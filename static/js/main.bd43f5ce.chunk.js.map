{"version":3,"sources":["i18next.js","pages/NoMatch/NoMatch.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","whitelist","debug","backend","loadPath","interpolation","escapeValue","NoMatch","Home","lazy","AppRoutes","exact","path","component","Banner","NavBar","Footer","App","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OASAA,IAGGC,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CACJC,YAAa,KACbC,UAdc,CAAC,KAAM,KAAM,KAAM,MAejCC,OAAO,EACPC,QAAS,CACPC,SAAU,yCAEZC,cAAe,CACbC,aAAa,KAIJZ,EAAf,E,YAAeA,I,cC1BAa,EAJC,WACd,OAAO,gDCAHC,EAAOC,gBAAK,kBAAM,uDAeTC,EAbG,WAChB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAM,CAAC,IAAK,SAAU,SAAU,UAChCC,UAAWL,IAEb,cAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWN,QCH3BO,EAASL,gBAAK,kBAAM,iCACpBM,EAASN,gBAAK,kBAAM,uDACpBO,EAASP,gBAAK,kBAAM,uDAkBXQ,EAjBH,WAGV,OACE,mCACE,cAAC,WAAD,CAAUC,SAAU,6CAApB,SACE,eAAC,IAAD,WACE,cAACJ,EAAD,IACA,cAACC,EAAD,IACA,cAAC,EAAD,IACA,cAACC,EAAD,YCXKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bd43f5ce.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// don't want to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\nconst Languages = [\"en\", \"fr\", \"de\", \"es\"];\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"en\",\r\n    whitelist: Languages,\r\n    debug: false,\r\n    backend: {\r\n      loadPath: \"/Template/locales/{{lng}}/{{ns}}.json\",\r\n    },\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React from \"react\";\r\n\r\nconst NoMatch = () => {\r\n  return <div>No match....</div>;\r\n};\r\n\r\nexport default NoMatch;\r\n","import React, { lazy } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport NoMatch from \"../pages/NoMatch/NoMatch\";\r\nconst Home = lazy(() => import(\"../pages/Home/Home\"));\r\n\r\nconst AppRoutes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={[\"/\", \"/step2\", \"/step3\", \"/step4\"]}\r\n        component={Home}\r\n      />\r\n      <Route path=\"*\" component={NoMatch}></Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default AppRoutes;\r\n","//Libraries\nimport React, { Suspense, lazy, useEffect } from \"react\";\nimport { HashRouter as Router} from \"react-router-dom\";\nimport \"./i18next\";\n\n//Styles\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AppRoutes from \"./routes/AppRoutes\";\n\nconst Banner = lazy(() => import(\"./parts/Banner/Banner\"));\nconst NavBar = lazy(() => import(\"./parts/NavBar/NavBar\"));\nconst Footer = lazy(() => import(\"./parts/Footer/Footer\"));\nconst App = () => {\n\n\n  return (\n    <>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Router>\n          <Banner />\n          <NavBar />\n          <AppRoutes />\n          <Footer />\n        </Router>\n      </Suspense>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./i18next\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}